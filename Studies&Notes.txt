


Spring + Struts2 + Hibernate SSH框架整合



--------------------------------------------------------------------------
--------------------------------------------------------------------------
Hibernate hbm.xml文件 一对多、多对一 简述 
--------------------------------------------------------------------------
--------------------------------------------------------------------------

一对多
CategorySecond.hbm.xml：二级分类和商品，一个二级分类对应对个商品，故在二级分类配置一对多
<set name="products">
    <key column="csid"/>
    <one-to-many class="cn.benjamin.shop.product.vo.Product" />
</set>

多对一
Product.hbm.xml：商品和二级分类，一个二级分类对应多个商品，故在商品分类中配置多对一
<many-to-one name="categorySecond" lazy="false" class="cn.benjamin.shop.categorysecond.vo.CategorySecond" column="csid"></many-to-one>

延迟加载
级联删除
Category.hbm.xml：级联删除 cascade="delete" ，删除一级分类同时删除所有相关联的二级分类
                  延迟加载 lazy="false"，如果对象A中包含了另一个对象B的set集合会同时加载对象B；否则不会去加载对象B，获取为空或使用时执行查询对象B
<!--一对多配置-->
<!--配置二级分类的集合-->
<set order-by="csid" cascade="delete" name="categorySeconds" lazy="false">
    <key column="cid"/>
    <one-to-many class="cn.benjamin.shop.categorysecond.vo.CategorySecond"/>
</set>


--------------------------------------------------------------------------
--------------------------------------------------------------------------
模块代码与XML配置交互简述
--------------------------------------------------------------------------
--------------------------------------------------------------------------


--category
----action
------CategoryAction.java    控制层
----service
------CategoryService.java    业务层
----dao
------CategoryDao.java    数据访问层（持久层）
----vo
------Category.java    实体对象
------Category.hbm.xml    Hibernate映射文件

--- applicationContext.xml <Spring> ---
1、XML 注入Service、Dao 流程：
Action -- 注入-- Service
Service -- 注入-- DAO
DAO     --注入-- HibernateDaoSupport

2、代码层：

2.1 Action：extends ActionSupport implements ModelDriven<User>
    注解：继承 ActionSupport；接口实现(模型驱动) ModelDriven<User>；实例化模型；注入 Service 并提供set方法；

2.2 Service：
    注解：注入 Dao 并提供 set方法；@Transactional  // 配置事务管理

2.3 DAO：extends HibernateDaoSupport
   注解：继承 HibernateDaoSupport 调用数据库相关方法

2.4 VO：
  注解：模块实体类定义，如 id, name, email 定义等；Category.hbm.xml为Hibernate数据库关系映射描述文件其作用指定：表、主键、属性字段


代码调用流程：
Action ---- Service ---- Dao
Action ---- jsp

面向接口编程：表示层调用控制层，控制层调用业务层，业务层调用数据访问层。
Action只负责管理，而Service负责实施，Dao只完成增删查改。

备注：jsp 存储数据显示数据可通过：session、值栈(key-value)


--------------------------------------------------------------------------
--------------------------------------------------------------------------
模块代码与XML配置文件简述
--------------------------------------------------------------------------
--------------------------------------------------------------------------


--src
----cn.benjamin.shop

------index
--------action
----------IndexAction.java

------user

--------action 控制器
----------UserAction.java
----------UserAction-user_regist-validation.xml

--------dao 持久层
----------UserDao.java

--------service 业务层
----------UserService.java

--------vo 实体类
----------User.java
----------User.hbm.xml

Java代码层注解：
Action层：该类是用户请求和业务逻辑的桥梁，该项都要 继承 和 实现接口“ extends ActionSupport implements ModelDriven<User>”;
Service层：通过Service层访问DAO层来实现对数据库的操作；同时访问DAO层与VO层，需注入DAO层、配置事务管理（@Transactional，否则不被Spring识别）;
DAO层：持久层、数据访问层，对数据库进行访问，操作数据库；DAO层访问VO层用户属性赋值，用户数据库查询返回后赋值查询；
VO层： 值对象，由一组属性和属性的get和set方法组成，即： 用一个VO对象对应整个界面的值。；+ Hibernate实体配置文件 user.hbm.xml；

示例Blog：
https://blog.csdn.net/s2251195069/article/details/80296120

SSH 项目 配置文件与代码交互梳理
java Action 代码 与 Struts2 xml配置文件交互
1、struts.xml配置：package的 action name(http路径方法名) > name class jsp；
<package name="shop" extends="struts-default" namespace="/">
    <!-- 配置首页访问的Action -->
    <action name="index" class="indexAction">
        <result name="index">/WEB-INF/jsp/index.jsp</result>
    </action>
    
    <!-- 配置用户模块的Action -->
    <action name="user_*" class="userAction" method="{1}">
        <result name="registPage">/WEB-INF/jsp/regist.jsp</result>
        <result name="input">/WEB-INF/jsp/regist.jsp</result>
    </action>
</package>
2、网页访问接口： /user_registPage.action、/user_findByName.action、/user_regist.action;
3、Action类方法：IndexAction：execute ;  UserAction：registPage、findByName、regist 

Action、Service、Dao、VO 访问交互梳理
1、VO：   定义用户变量属性，uid、username、password 等
2、DAO：数据模块持久层代码，操作数据库代码
3、Service：Service 访问 DAO中查询后的数据
4、Action： Action 访问 Service中查询后的数据
5、示例Blog：https://blog.csdn.net/wjw0130/article/details/51062341

xml配置层注解：
--- UserAction-user_regist-validation.xml <Struts2> ---
1、Struts2数据校验配置：
2、示例Blog：https://www.cnblogs.com/nayitian/p/3439371.html

--- User.hbm.xml <Hibernate> ---
1、Hibernate 配置：class table(数据库表)、主键（id <generator class="native"/>）、其他字段
2、描述：实体与表的映射关系通过XML来描述文件，即：Hibernate 映射文件；


--------------------------------------------------------------------------
--------------------------------------------------------------------------
项目目录结构与文件名讲解：
--------------------------------------------------------------------------
--------------------------------------------------------------------------


-- src
----applicationContext.xml    Spring核心配置文件
----struts.xml    Struts2核心视图配置文件
----jdbc.properties    Mysql数据核心配置文件
----log4j.xml    日志信息收集核心配置文件

-- web    静态文件配置目录
----css
----js
----WEB-INF
------lib
------classes
------jsp
------web.xml
----index.jsp

xml配置层注解：

--- applicationContext.xml <Spring> ---
1、Spring核心配置概览：Action、Service、Dao、数据库配置、C3P0连接池、Hibernate的相关信息、事务管理；
2、Action模块：id class scope、注入Service（可配置多个） ；与指定目录代码交互
3、Service模块：id class、注入 Dao；与指定目录代码交互
4、Dao模块：id class、注入 事务管理（与Hibernate关联）；与指定目录代码交互

--- struts.xml <Struts2> ---
1、Struts2核心配置概览：pageage、action、 result（ jsp ）、开发模式；
2、视图配置文件：url路径配置、访问jsp文件配置
3、示例Blog：https://www.cnblogs.com/zhangyinhua/p/7772797.html

--- web.xml <Web> ---
1、web.xml概览：Spring核心监听器、Struts2核心过滤器
2、监听器：listener
3、过滤器：filter    filter-mapping
4、详解 Blog：https://www.cnblogs.com/cczz_11/p/4363314.html

注意点：
1、xml 头信息，不同的xml需要不同的xml头
2、web目录下的jsp文件可直接访问，一般将jsp文件放置于WEB-INF目录下；其他静态文件如 css、js、image等放置web根目录；
3、jsp文件引用相对路径文件如：css、js、image等 使用标签 ${pageContext.request.scheme } 访问WEB根目录文件

jsp 相关：
关于引用静态文件：https://blog.csdn.net/a1124544556/article/details/51789811
1、EL表达式
2、常用标签如：
3、模块数据引用：<%@ taglib uri="/struts-tags" prefix="s"%>


--------------------------------------------------------------------------
--------------------------------------------------------------------------
ApplicationContext.xml  Struts.xml 核心配置文件简述
--------------------------------------------------------------------------
--------------------------------------------------------------------------

ApplicationContext.xml

1.  配置连接池
    1.1  引入外部属性文件
    1.2  配置C3P0连接池
2.  Hibernate的相关信息
    2.1  注入连接池
    2.2  配置Hibernate的属性
    2.3  配置Hibernate的映射文件
3.  事务管理
    3.1  事务管理器
    3.2  开启注解事务
4.  Action配置
    4.1  定义id；唯一
    4.2  定义class；引入对应的Java Action 文件
    4.3  定义scope模式；默认为单例模式，所有用户访问时创建同一个Action对象；prototype 为每个请求提供一个Action实例；session 为每个会话提供一个Action实例；
    4.4  注入Service；可以注入多个Service，注意Java Action文件中也需注入多个Service 同步配置
    <bean id="indexAction" class="cn.benjamin.shop.index.action.IndexAction" scope="prototype">
        <property name="categoryService" ref="categoryService"/>
        <property name="productService" ref="productService"/>
    </bean>
5.  Service配置
    5.1  定义id；唯一
    5.2  定义class；引入对应Java Service 文件
    5.3  注入DAO；注入对应数据访问层
    <bean id="userService" class="cn.benjamin.shop.user.service.UserService">
        <property name="userDao" ref="userDao"/>
    </bean>
6.  DAO配置
    6.1  定义id；唯一
    6.2  定义class；引入对应的JAVA DAO 文件
    6.3  注入sessionFactory数据源；即Hibernate配置的id
    <bean id="categorySecondDao" class="cn.benjamin.shop.categorysecond.dao.CategorySecondDao">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
备注：name代表引用bean的id；ref代表将对象的值传递到下一个Java 文件访问


Struts.xml

1.  开发模式
2.  包配置
    2.1  开发模式
    2.2  包配置
           2.2.1  全局访问配置
           2.2.2  访问路径配置；访问Action返回路径：单个、多个，相对路径，返回jsp，跳转Action等
<struts>

    <!-- 开发模式 -->
    <constant name="struts.devMode" value="false" />

    <package name="shop" extends="struts-default" namespace="/">
        <!--配置全局访问-->
        <global-results>
            <result name="msg">/WEB-INF/jsp/msg.jsp</result>
            <result name="login">/WEB-INF/jsp/login.jsp</result>
        </global-results>

        <!-- 配置首页访问的Action -->
        <action name="index" class="indexAction">
            <result name="index">/WEB-INF/jsp/index.jsp</result>
        </action>

        <!-- 配置用户模块的Action -->
        <action name="user_*" class="userAction" method="{1}">
            <result name="registPage">/WEB-INF/jsp/regist.jsp</result>
            <result name="input">/WEB-INF/jsp/regist.jsp</result>
            <result name="loginPage">/WEB-INF/jsp/login.jsp</result>
            <result name="loginSuccess" type="redirectAction">index</result>
            <result name="quit" type="redirectAction">index</result>
            <result name="checkcodeFail">/WEB-INF/jsp/regist.jsp</result>
        </action>

        <!-- 验证码Action -->
        <action name="checkImg" class="checkImgAction"></action>

        <!--配置后台一级分类管理的Action-->
        <action name="adminCategory_*" class="adminCategoryAction" method="{1}">
            <result name="findAll">/admin/category/list.jsp</result>
            <result name="saveSuccess" type="redirectAction">adminCategory_findAll.action</result>
            <result name="deleteSuccess" type="redirectAction">adminCategory_findAll.action</result>
            <result name="editSuccess">/admin/category/edit.jsp</result>
            <result name="updateSuccess" type="redirectAction">adminCategory_findAll.action</result>
        </action>

    </package>

</struts>


jdbc.properties
jdbc.driver = com.mysql.jdbc.Driver
jdbc.url = jdbc:mysql://localhost:3306/shop
jdbc.user = root
jdbc.password = root


log4j.properties
### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

### direct messages to file mylog.log ###
log4j.appender.file=org.apache.log4j.FileAppender
log4j.appender.file.File=c:/mylog.log
log4j.appender.file.layout=org.apache.log4j.PatternLayout
log4j.appender.file.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

### set log levels - for more verbose logging change 'info' to 'debug' ###

log4j.rootLogger=info, stdout


web.xml
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!-- 配置Spring的核心监听器 -->
    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:applicationContext.xml</param-value>
    </context-param>

    <!-- 配置Struts2核心过滤器 -->
    <filter>
        <filter-name>struts2</filter-name>
        <filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>struts2</filter-name>
        <url-pattern>/*</url-pattern>
        <dispatcher>REQUEST</dispatcher>
        <dispatcher>FORWARD</dispatcher>
    </filter-mapping>

    <!--<display-name></display-name>-->
    <!--<welcome-file-list>-->
        <!--<welcome-file>index.jsp</welcome-file>-->
    <!--</welcome-file-list>-->

</web-app>







































